#include <ArduinoSTL.h>
#include<Wire.h>
#include<string>

#include <FastIO.h>
#include <I2CIO.h>
#include <LCD.h>
#include <LiquidCrystal.h>
#include <LiquidCrystal_I2C.h>
#include <LiquidCrystal_SR.h>
#include <LiquidCrystal_SR2W.h>
#include <LiquidCrystal_SR3W.h>


unsigned long lastDebounceTime =0;
unsigned long debounceDelay = 250;
  enum btnColors {RED,BLUE,GREEN,YELLOW};
  enum led {blue1,green1,yellow1,red1,yellow2,green2,blue2};
  const int btns[] = {2,3,4,5};
  const int leds[] = {7,8,9,10,11,12,13};
  bool state[] = {0,0,0,0};
  bool wait = 0;

LiquidCrystal_I2C lcd(0x3F,2,1,0,4,5,6,7);

//Utility variables
int numPlayers = 3;
const int MAXPlayers =10;
const int MINPlayers =3;
int numAdvisors =0;
int antChrists =0;
//Game Variables
int currentPlayer=0;
int ants = 100;
int gamePrompt = 3000;
std::vector<bool> players;
//Function Prototypes
void btnState();
void btnOff();
bool passOrFail(int advisors);
void events();
int ledMiniGame(int lcdMovementSpeed);

int passDelay = 500;
int failDelay = 300;

void setup() {
Serial.begin(9600);
  randomSeed(analogRead(0));
  lcd.begin(16, 2);
  lcd.setBacklightPin(3,POSITIVE);
  lcd.setBacklight(HIGH);
  lcd.clear();
  for ( int i =0; i< 7;i++)//Initialize leds as output
  {
    pinMode(leds[i],OUTPUT);
  }
  for (int i =0; i< 4;i++)//Initialize btns as input
  {
    pinMode(btns[i],INPUT);
  }

//FIND NUmber of players

btnOff();
Serial.print("start wait for button");
wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(String("# Players: ")+String(numPlayers));
  lcd.setCursor(0,1);
  lcd.print("Blu^ YLOv GRN K");
  btnState();
  if(state[BLUE])
  {
    if(numPlayers<MAXPlayers)
    {
      numPlayers++;
    }else
    {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(String("No more than")+String(MAXPlayers));
      lcd.setCursor(0,1);
      lcd.print("");
    }
  }
  if(state[YELLOW])
  {
    if(numPlayers>MINPlayers)
    {
      numPlayers--;
    }else
    {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(String("No less than")+String(MINPlayers));
      lcd.setCursor(0,1);
      lcd.print("");
    }
  }
  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();
}
lcd.clear();
btnState();
numAdvisors = numPlayers*2/3;

for (int i =0; i<numPlayers;i++)
{
  players.push_back(0);
}
antChrists=numPlayers/3;
while(antChrists>0)
{
  int randNumber = random(numPlayers);
  if(players[randNumber]==0)
  {
    players[randNumber]=1;
    antChrists--;
  }
}


for(int i =0; i< numPlayers;i++)
{
wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(String("Give to Plyr ")+String(i+1));
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
  btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();  
}
if(players[i])
{
  wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(String("Plyr")+String(i+1)+String(" AntChrist"));
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();  
}
}else
{
    wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(String("Plyr")+String(i+1)+String(" Ant"));
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();  
}
} 
}
}

void loop() {
wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(String("Plyr")+String(currentPlayer+1)+String(" is Queen"));
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();
}
wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(String("Plz pick")+String(numAdvisors)+String("Advsrs"));
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();
}
events();
  

}

void events()
{
  int lcdMovementSpeed;
  int eventFlag;
  int randNumber = random(1);
  if(randNumber)//Good event
  {
        wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Good Event!");
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();  
  
}
eventFlag =0;
  }else//Bad Event
  {
            wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Bad Event!");
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();  
}
eventFlag =1;
  }

  
  if(passOrFail(eventFlag))
  {
    lcdMovementSpeed = passDelay;
  }else
  {
    lcdMovementSpeed = failDelay;
  }
  if(ledMiniGame(lcdMovementSpeed) == blue1 || (ledMiniGame(lcdMovementSpeed) == blue2)){
    //set the probability
    //lose 75% of ants
    if(eventFlag == 1) {
      ants = ants - (0.75*ants);
    }
    //or gain 0% of ants so do nothing for else
    
  } else if(ledMiniGame(lcdMovementSpeed) == green1 || (ledMiniGame(lcdMovementSpeed) == green2)) {
    //lose 50% of ants
    //gain 25% of ants
    if(eventFlag == 1) {//Bad event
      ants = ants - (ants*0.50);
    } else {
      ants = ants + (ants*0.25);
    }
  } else if(ledMiniGame(lcdMovementSpeed) == yellow1 || (ledMiniGame(lcdMovementSpeed) == yellow2)) {
    //lose 25% of ants
    if(eventFlag == 1) {
      ants = ants - (ants*0.25);
    }else {//gain 75% of ants
      ants = ants + (ants*0.75);
    }
    
  } else if(ledMiniGame(lcdMovementSpeed) == red1) {
    //lose 0% of ants nothing to be done for eventFlag == 1
    //gain 100% of ants
    if(eventFlag == 0) {//good event
      ants = ants + (ants);
    }
  }
  wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(String("Ants: ")+String(ants));
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = 1;
  }
  btnOff();  
}
}

bool passOrFail(int eventFlag)
{
  int good,bad;//FAvorable for ant colony!
  for(int i =0;i<numAdvisors;i++)
  {
                wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(String("Advisor ")+String(i+1)+String("?"));
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = 1;
  }
  btnOff();  
}
                wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  if(eventFlag)
  {
  lcd.print("Bad Evnt occrs?");
  }else
  {
    lcd.print("Good Evnt occrs?");
  }
  lcd.setCursor(0,1);
  lcd.print("GRN=YES RED=NO");
    btnState();

  if(state[GREEN])
  {
    wait = 1;
    if(eventFlag)
    {
      bad++;
    }else
    {
      good++;
    }
  }else if(state[RED])
  {
    wait =1;
        if(eventFlag)
    {
      good++;
    }else
    {
      bad++;
    }
  }
  btnOff();  
}
  }
  if(good>=bad){
    return true;
  }else
  {
    return false;
  }
}




int ledMiniGame(int lcdMovementSpeed){//returns a percentage of pass or fail
  unsigned int tempD = debounceDelay;
  debounceDelay = 50;
  wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Give to Queen");
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff();
} 
  wait =0;
while(!wait)
{ 
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Ready Queen?");
  lcd.setCursor(0,1);
  lcd.print("GRN to cont");
    btnState();

  if(state[GREEN])
  {
    wait = state[GREEN];
  }
  btnOff(); 
}
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("A test of skill!");
  lcd.setCursor(0,1);
  lcd.print("Stop on Red!");
  delay(gamePrompt);

  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Stop on Red!");
  lcd.setCursor(0,1);
  lcd.print("In 3");
  delay(gamePrompt/3);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Stop on Red!");
  lcd.setCursor(0,1);
  lcd.print("In 2");
  delay(gamePrompt/3);
    lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Stop on Red!");
  lcd.setCursor(0,1);
  lcd.print("In 1");
  delay(gamePrompt/3);
    lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Stop on Red!");
  lcd.setCursor(0,1);
  lcd.print("GO!");

wait =0;
int lednum=0;
  unsigned long previousMillis =0;
  unsigned long currentMillis = millis();
  int currentLED =0;
  int previousLED = 0;
while(!wait)
{ 
  currentMillis = millis();
if((unsigned long)(currentMillis-previousMillis)>=lcdMovementSpeed)
{
  digitalWrite(leds[currentLED],LOW);//Turn off the previous one
  if(currentLED==6)
  {
    currentLED=0;
  }else
  {
    currentLED++;
  }
  digitalWrite(leds[currentLED],HIGH);
  previousMillis = millis();
  btnState();
  if(state[GREEN]|state[YELLOW]|state[BLUE]|state[RED])
  {
    wait =1;
    lednum =currentLED;
    
  }
}
}
for(int i=0;i<7;i++)
{
  digitalWrite(leds[i],LOW);
}
debounceDelay = tempD;
return lednum;
}//ledMiniGame








void btnState()
{
  if((millis() - lastDebounceTime)>debounceDelay)
  {
    if(digitalRead(btns[RED]))
    {
      state[RED] = digitalRead(btns[RED]);
      lastDebounceTime = millis();
    }
    if(digitalRead(btns[BLUE]))
    {
      state[BLUE] = digitalRead(btns[BLUE]);
      lastDebounceTime = millis();
    }if(digitalRead(btns[GREEN]))
    {
      state[GREEN] = digitalRead(btns[GREEN]);
      lastDebounceTime = millis();
    }if(digitalRead(btns[YELLOW]))
    {
      state[YELLOW] = digitalRead(btns[YELLOW]);
      lastDebounceTime = millis();
    }
  }
}
void btnOff()
{
  state[RED] =0;
  state[BLUE] =0;
  state[YELLOW] =0;
  state[GREEN] =0;
}
